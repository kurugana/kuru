class CleanData:
    
    def __init__(self,x,row,col):
        self.x = x
        self.row = row
        self.col = col
        self.clean = None
        self.remove_col_status = True
        self.remove_row_status = True
    
    def remove_row(self):
        if self.remove_row_status:
            thresh = int((1 - self.row)*self.x.shape[0])
            if self.clean is None:
                self.clean = self.x.dropna(axis='rows',thresh=thresh).copy()
            else:
                self.clean.dropna(axis='rows',thresh=thresh,inplace=True)
            self.remove_row_status = False
        else:
            print("Remove Row Method 가 이미 실행되었습니다.")
        return self.clean
            
    
    def remove_col(self):
        if self.remove_col_status:
            thresh = int((1-self.col)*self.x.shape[1])
            if self.clean is None:
                self.clean = self.x.dropna(axis='columns',thresh=thresh).copy()
            else:
                self.clean.dropna(axis='columns',thresh=thresh,inplace=True)
            self.remove_col_status = False
        else:
            print("Remove Col Method 가 이미 실행되었습니다.")
        return self.clean
    
    def imputation(self):
        if self.remove_row_status:
            self.clean = self.remove_row()
            self.remove_row = False
        if self.remove_col_status:
            self.clean = self.remove_col()
            self.remove_row = False
        def _imputation(x):
            # r1 = np.linspace(x.min(), x.max(),5)[[1,3]][0]
            # r2 = np.linspace(x.min(), x.max(),5)[[1,3]][1]
            r1 = np.percentile(x[~x.isna()], 25)
            r2 = np.percentile(x[~x.isna()], 25)
            value = x[(x >= r1) & (x <= r2)].mean()
            x.fillna(value)
            return x.fillna(value)
        result = self.clean.apply(_imputation,axis=0)
        
        return result
    
    def run(self):
        self.clean = self.imputation()
        print("데이터 처리가 완료 되었습니다.")
        return self.clean
